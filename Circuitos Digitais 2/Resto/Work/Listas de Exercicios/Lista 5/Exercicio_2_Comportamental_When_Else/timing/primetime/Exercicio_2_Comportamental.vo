// Copyright (C) 1991-2010 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II"
// VERSION "Version 9.1 Build 350 03/24/2010 Service Pack 2 SJ Web Edition"

// DATE "04/24/2013 10:20:26"

// 
// Device: Altera EPM7032SLC44-5 Package PLCC44
// 

// 
// This Verilog file should be used for PrimeTime (Verilog) only
// 

`timescale 1 ps/ 1 ps

module Exercicio_2_Comportamental (
	ch,
	Alarme);
input 	[3:0] ch;
output 	Alarme;

// Design Ports Information
// ch[0]	=>  Location: PIN_24
// ch[1]	=>  Location: PIN_21
// ch[2]	=>  Location: PIN_20
// ch[3]	=>  Location: PIN_25
// Alarme	=>  Location: PIN_4

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
// unknown value (1'bx) is not needed for this tool. Default to 1'b0
assign unknown = 1'b0;

// synopsys translate_off
initial $sdf_annotate("Exercicio_2_Comportamental_v.sdo");
// synopsys translate_on

wire \ch[0]~dataout ;
wire \ch[1]~dataout ;
wire \Equal0~2_dataout ;

wire \ALT_INV_ch[0]~dataout ;

INV \INV_INST_ch[0]~dataout  (
	.IN1(\ch[0]~dataout ),
	.Y(\ALT_INV_ch[0]~dataout ));

// Location: PIN_24
max_io \ch[0]~I (
	.datain(gnd),
	.oe(gnd),
	.modesel(9'b101010001),
	.dataout(\ch[0]~dataout ),
	.padio(ch[0]));
// synopsys translate_off
// defparam \ch[0]~I .bus_hold = "false";
// defparam \ch[0]~I .open_drain_output = "false";
// defparam \ch[0]~I .operation_mode = "input";
// defparam \ch[0]~I .weak_pull_up = "false";
// synopsys translate_on

// Location: PIN_21
max_io \ch[1]~I (
	.datain(gnd),
	.oe(gnd),
	.modesel(9'b101010001),
	.dataout(\ch[1]~dataout ),
	.padio(ch[1]));
// synopsys translate_off
// defparam \ch[1]~I .bus_hold = "false";
// defparam \ch[1]~I .open_drain_output = "false";
// defparam \ch[1]~I .operation_mode = "input";
// defparam \ch[1]~I .weak_pull_up = "false";
// synopsys translate_on

// Location: LC1
max_mcell \Equal0~2 (
	.clk(gnd),
	.aclr(gnd),
	.pexpin(gnd),
	.fpin(vcc),
	.pterm0({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.pterm1({vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,\ch[1]~dataout ,\ALT_INV_ch[0]~dataout }),
	.pterm2({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.pterm3({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.pterm4({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.pterm5({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.pxor({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.pclk({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.pena({vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc}),
	.paclr({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.papre({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.modesel(13'b0001001000001),
	.dataout(\Equal0~2_dataout ),
	.pexpout());
// synopsys translate_off
// defparam \Equal0~2 .operation_mode = "normal";
// defparam \Equal0~2 .output_mode = "comb";
// defparam \Equal0~2 .pexp_mode = "off";
// synopsys translate_on

// Location: PIN_20
max_io \ch[2]~I (
	.datain(gnd),
	.oe(gnd),
	.modesel(9'b101010001),
	.dataout(),
	.padio(ch[2]));
// synopsys translate_off
// defparam \ch[2]~I .bus_hold = "false";
// defparam \ch[2]~I .open_drain_output = "false";
// defparam \ch[2]~I .operation_mode = "input";
// defparam \ch[2]~I .weak_pull_up = "false";
// synopsys translate_on

// Location: PIN_25
max_io \ch[3]~I (
	.datain(gnd),
	.oe(gnd),
	.modesel(9'b101010001),
	.dataout(),
	.padio(ch[3]));
// synopsys translate_off
// defparam \ch[3]~I .bus_hold = "false";
// defparam \ch[3]~I .open_drain_output = "false";
// defparam \ch[3]~I .operation_mode = "input";
// defparam \ch[3]~I .weak_pull_up = "false";
// synopsys translate_on

// Location: PIN_4
max_io \Alarme~I (
	.datain(\Equal0~2_dataout ),
	.oe(vcc),
	.modesel(9'b101010010),
	.dataout(),
	.padio(Alarme));
// synopsys translate_off
// defparam \Alarme~I .bus_hold = "false";
// defparam \Alarme~I .open_drain_output = "false";
// defparam \Alarme~I .operation_mode = "output";
// defparam \Alarme~I .weak_pull_up = "false";
// synopsys translate_on

endmodule
