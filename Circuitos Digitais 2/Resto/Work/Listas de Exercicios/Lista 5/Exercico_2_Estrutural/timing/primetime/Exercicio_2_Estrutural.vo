// Copyright (C) 1991-2010 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II"
// VERSION "Version 9.1 Build 350 03/24/2010 Service Pack 2 SJ Web Edition"

// DATE "04/23/2013 20:36:16"

// 
// Device: Altera EPM7032SLC44-5 Package PLCC44
// 

// 
// This Verilog file should be used for PrimeTime (Verilog) only
// 

`timescale 1 ps/ 1 ps

module Exercicio_2_Estrutural (
	Driv,
	Pass,
	Ing,
	Beltd,
	Alarme);
input 	Driv;
input 	Pass;
input 	Ing;
input 	Beltd;
output 	Alarme;

// Design Ports Information
// Driv	=>  Location: PIN_20
// Pass	=>  Location: PIN_25
// Ing	=>  Location: PIN_24
// Beltd	=>  Location: PIN_21
// Alarme	=>  Location: PIN_4

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
// unknown value (1'bx) is not needed for this tool. Default to 1'b0
assign unknown = 1'b0;

// synopsys translate_off
initial $sdf_annotate("Exercicio_2_Estrutural_v.sdo");
// synopsys translate_on

wire \Ing~dataout ;
wire \Beltd~dataout ;
wire \P4|S1~1_dataout ;

wire \ALT_INV_Beltd~dataout ;

INV \INV_INST_Beltd~dataout  (
	.IN1(\Beltd~dataout ),
	.Y(\ALT_INV_Beltd~dataout ));

// Location: PIN_24
max_io \Ing~I (
	.datain(gnd),
	.oe(gnd),
	.modesel(9'b101010001),
	.dataout(\Ing~dataout ),
	.padio(Ing));
// synopsys translate_off
// defparam \Ing~I .bus_hold = "false";
// defparam \Ing~I .open_drain_output = "false";
// defparam \Ing~I .operation_mode = "input";
// defparam \Ing~I .weak_pull_up = "false";
// synopsys translate_on

// Location: PIN_21
max_io \Beltd~I (
	.datain(gnd),
	.oe(gnd),
	.modesel(9'b101010001),
	.dataout(\Beltd~dataout ),
	.padio(Beltd));
// synopsys translate_off
// defparam \Beltd~I .bus_hold = "false";
// defparam \Beltd~I .open_drain_output = "false";
// defparam \Beltd~I .operation_mode = "input";
// defparam \Beltd~I .weak_pull_up = "false";
// synopsys translate_on

// Location: LC1
max_mcell \P4|S1~1 (
	.clk(gnd),
	.aclr(gnd),
	.pexpin(gnd),
	.fpin(vcc),
	.pterm0({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.pterm1({vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,\ALT_INV_Beltd~dataout ,\Ing~dataout }),
	.pterm2({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.pterm3({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.pterm4({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.pterm5({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.pxor({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.pclk({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.pena({vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc,vcc}),
	.paclr({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.papre({gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd,gnd}),
	.modesel(13'b0001001000001),
	.dataout(\P4|S1~1_dataout ),
	.pexpout());
// synopsys translate_off
// defparam \P4|S1~1 .operation_mode = "normal";
// defparam \P4|S1~1 .output_mode = "comb";
// defparam \P4|S1~1 .pexp_mode = "off";
// synopsys translate_on

// Location: PIN_20
max_io \Driv~I (
	.datain(gnd),
	.oe(gnd),
	.modesel(9'b101010001),
	.dataout(),
	.padio(Driv));
// synopsys translate_off
// defparam \Driv~I .bus_hold = "false";
// defparam \Driv~I .open_drain_output = "false";
// defparam \Driv~I .operation_mode = "input";
// defparam \Driv~I .weak_pull_up = "false";
// synopsys translate_on

// Location: PIN_25
max_io \Pass~I (
	.datain(gnd),
	.oe(gnd),
	.modesel(9'b101010001),
	.dataout(),
	.padio(Pass));
// synopsys translate_off
// defparam \Pass~I .bus_hold = "false";
// defparam \Pass~I .open_drain_output = "false";
// defparam \Pass~I .operation_mode = "input";
// defparam \Pass~I .weak_pull_up = "false";
// synopsys translate_on

// Location: PIN_4
max_io \Alarme~I (
	.datain(\P4|S1~1_dataout ),
	.oe(vcc),
	.modesel(9'b101010010),
	.dataout(),
	.padio(Alarme));
// synopsys translate_off
// defparam \Alarme~I .bus_hold = "false";
// defparam \Alarme~I .open_drain_output = "false";
// defparam \Alarme~I .operation_mode = "output";
// defparam \Alarme~I .weak_pull_up = "false";
// synopsys translate_on

endmodule
