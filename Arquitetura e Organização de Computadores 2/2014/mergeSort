ld  R0, (101) #n
ld  R1, (102) #X[0]
ld  R3, (103) #X[1]
ld  R2, (103) # le 2
ld  R5, (107) # le 1
ld  R6, (108) # i = 0  
ld  R15, (108)  # j = 0
F50:

ble R0, R2, F0       	# n >= 2
F0: bge R0, R2, F1   		# n <= 2



F3: bg  R0, R2, F4       # se n > 2
    exit
F4: div R0, R2, R4       # m = [n/2]
    sub R4, R5, R4       # m = m-1
F5: bl  R6, R4, F6       # para i= 0 até m-1 faça
  
    ld  R6, (108)        # i = 0
    add R6, R4, R6       # i = m
    sub R0, R5, R0       # n = n-1

F7: bl  R6, R0, F8 		#para i = m até n-1
    ld  R0, (108)            #  n = 0
    add R0, R4, R0           # n = m  
    ld  R1, (111)           # X[] = 0
    add R1, R10, R1
    
    bl R0, R5, F8
	ld R20, (108)		# k = 0
	sub R0, R5, R0 		# n - 1
	
	 bl R6, R0, F10		
F10: ble R10, R11, F11 #A[i] <= B[j]
	 ld R1, (108)		#X[k] = 0
	 add R1, R11, R1	# X[k] = B[j]
	 add R15, R5, R15		# j++
	 
F11: ld R1, (108)
	 add R1, R10, R1
	 add R6, R5, R6
	
F8:	jump F50                 #MergeSort(m, A)
	
	

F8: add R11, R1, R11   #B[i-m] = X[i]
    add R6, R5, R6   
    jump F7     
	     		  # i++
				  
F6: add R10, R1, R10	 # A[i] = X[i]
    add R6, R5, R6                      # i++      
    jump F5
    
    jump F5


F1: bg  R1(0), R1(1), F2   #se X[0] > X[1]

F2: add R3, R1(0), R3    # T = X[0]
    ld  R1(0), (104)     # X[0] = 0
    add R1(0), R1(1), R1(0)  #X[0] = X[1]
    ld  R1(1), (105)         #X[1] = 0
    add R1(1), R3, R1(1)    #X[1] = T
    sd  R1, (106)
    exit
